[tools]
python = "3.13.5"
uv = "0.7.18"
"pipx:ty" = "latest"
taplo = "latest"
# "npm:opencode-ai" = "0.1.194"  # we need the version with print flag, see tasks.build-opencode

[tasks.run]
description = "Run the agent"
run = "uv run agent"

[tasks.check]
description = "Run all checks and tests"
depends = ["lint", "pyright", "check-schema", "test"]

# Note: this includes some formatting rules that are *not* checked by the linter.
# This is because some of the linter warns are completely harmless.
#
# D213, D209 - format multiline docstrings
# I, RUF022 - sort imports
[tasks.format]
description = "Format the Python files"
run = """
  ruff check --fix-only \
    --extend-select D213,D209,I,RUF022 \
    --config lint.isort.lines-after-imports=2; \
  ruff format
  """

[tasks.generate-schema]
description = "Generate config.schema.json from Pydantic"
run = "uv run scripts/generate_schema.py"

# Cleanup / autofix

[tasks.x-add-types]
description = "Auto-add types to the Python files, across all commits"
run = [
  'jj x fd .py -x uv run --with=autotyping --isolated python -m autotyping {} --safe',
]

[tasks.x-autoimport]
description = "Add missing imports to the Python files, across all commits"
run = """
  jj x 'fd .py | xargs uvx --isolated autoimport'
"""

[tasks.xformat]
description = "Run 'format' across all commits"
run = """jj x -r 'mutable()' 'MISE_TRUSTED_CONFIG_PATHS=$(pwd)/mise.toml mise run format'"""

[tasks.clean-branches]
description = "Remove all agent branches (bookmarks) below main"
run = '''
  jj bookmark list -r 'main | (~main::)' -T'self++"\n"' | grep -E '^agent/' | grep -Ev '^main$' | xargs jj bookmark delete
'''

# Checks

[tasks.test]
description = "Run all tests"
run = ["uv run pytest -v"]

[tasks.check-schema]
description = "Check that the checked-in schema matches Pydantic and the current .agent.toml"
run = ["uv run scripts/generate_schema.py --diff", "taplo validate .agent.toml"]

[tasks.lint]
description = "Run ruff to check the Python files"
run = "ruff check"

[tasks.pyright]
description = "Run pyright to check types in the Python files"
run = "uv run pyright --project ."

# Misc

[tasks.ty]
description = "Run ty to check types in the Python files (doesn't fully work yet)"
run = "ty check"

# https://github.com/sst/opencode/pull/533
[tasks.build-opencode]
description = "Build a specific commit of Opencode CLI and install it to ~/.agent/bin/opencode"
tools.bun = "1.2.18"
tools.go = "1.24.4"
run = """
  set -euo pipefail

  bun_bin=$(which bun)
  go_bin=$(which go)

  cd ~/.agent/
  COMMIT=a60697ce1fd0d1e0f2c4f930a456b8fe73ccbeda
  if [ -d opencode ]; then rm -rf opencode; fi
  git clone https://github.com/sst/opencode.git --depth 1 --revision $COMMIT

  version=custom

  cd ~/.agent/opencode/packages/tui

  mkdir -p dist/bin
  CGO_ENABLED=0 $go_bin build -ldflags="-s -w -X main.Version=${version}" -o ../opencode/dist/bin/tui ../tui/cmd/opencode/main.go

  cd ~/.agent/opencode/packages/opencode

  $bun_bin install
  $bun_bin build --define OPENCODE_VERSION="'${version}'" --compile --minify --outfile=dist/bin/opencode ./src/index.ts ./dist/bin/tui
  rm -rf ./dist/bin/tui

  # Copy the built files to the agent's bin directory
  mkdir -p ~/.agent/bin
  cp dist/bin/opencode ~/.agent/bin/
  chmod +x ~/.agent/bin/opencode

  # Clean up
  rm -rf ~/.agent/opencode-

  echo "Opencode built and installed to ~/.agent/bin/opencode"
"""
