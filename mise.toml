# Auto-activate the venv so that `python` and `python3` work even without `uv run`.
settings.python.uv_venv_auto = true

[tools]
python = "3.13.5"
uv = "0.7.18"
"pipx:ty" = "latest"
taplo = "latest"
# "npm:opencode-ai" = "0.1.194"  # we need the version with print flag, see tasks.build-opencode

[tasks.run]
description = "Run the agent"
run = "uvx --isolated --from . --refresh -- agent"

[tasks.check]
description = "Run all checks and tests"
depends = ["lint", "pyright", "check-schema", "test"]


[tasks.logs]
description = "Show the logs of the agent (~/.agent/logs/)"
quiet = true
usage = """
  flag "--file <file>" "The log file to view (default: latest log file in ~/.agent/logs/)"
  arg "[eliot_tree_args]" var=#true "Additional arguments for eliot-tree"
"""
run = """
  if [[ -z "$usage_file" ]]; then
    usage_file=~/.agent/logs/"$(ls -t ~/.agent/logs/ | head -n 1)"
  fi
  echo "--- $usage_file ---"
  eval "args=(${usage_eliot_tree_args:-})"
  cat "$usage_file" \
    | jq -c 'del(.state.steps_log, .result.steps_log, .state.attempts_log, .result.attempts_log, .event)' 2>/dev/null \
    | jq -c 'select(.message_type // "" | startswith("log.") | not)' \
    | uv run eliot-tree "${args[@]}"
  echo "--- $usage_file ---"
"""

[tasks."logs:full"]
description = "Show the logs of the agent (~/.agent/logs/) without filtering"
quiet = true
usage = """
  flag "--file <file>" "The log file to view (default: latest log file in ~/.agent/logs/)"
  arg "[eliot_tree_args]" var=#true "Additional arguments for eliot-tree"
"""
run = """
  if [[ -z "$usage_file" ]]; then
    usage_file=~/.agent/logs/"$(ls -t ~/.agent/logs/ | head -n 1)"
  fi
  echo "--- $usage_file ---"
  eval "args=(${usage_eliot_tree_args:-})"
  uv run eliot-tree "$usage_file" "${args[@]}"
  echo "--- $usage_file ---"
"""

# Note: this includes some formatting rules that are *not* checked by the linter.
# This is because some of the linter warns are completely harmless.
#
# D213, D209 - format multiline docstrings
# I, RUF022 - sort imports
[tasks.format]
description = "Format the Python files"
run = """
  ruff check --fix-only \
    --extend-select D213,D209,I,RUF022 \
    --config lint.isort.lines-after-imports=2; \
  ruff format
  """

[tasks.generate-schema]
description = "Generate config.schema.json from Pydantic"
run = "uv run scripts/generate_schema.py"

# Cleanup / autofix

[tasks.x-add-types]
description = "Auto-add types to the Python files, across all commits"
run = [
  'jj x fd .py -x uv run --with=autotyping --isolated python -m autotyping {} --safe',
]

[tasks.x-autoimport]
description = "Add missing imports to the Python files, across all commits"
run = """
  jj x 'fd .py | xargs uvx --isolated autoimport'
"""

[tasks.xformat]
description = "Run 'format' across all commits"
run = """jj x 'MISE_TRUSTED_CONFIG_PATHS=$(pwd)/mise.toml mise run format'"""

[tasks.clean-branches]
description = "Remove all agent branches (bookmarks) below main"
run = '''
  jj bookmark list -r 'main | (~main::)' -T'self++"\n"' | grep -E '^agent/' | xargs jj bookmark delete
'''

[tasks."clean-branches:all"]
description = "Remove all agent branches (bookmarks) everywhere"
run = '''
  jj bookmark list -T'self++"\n"' | grep -E '^agent/' | xargs jj bookmark delete
'''

# Checks

[tasks.test]
description = "Run all tests"
run = ["uv run pytest -v"]

[tasks.check-schema]
description = "Check that the checked-in schema matches Pydantic and the current .agent.toml"
run = ["uv run scripts/generate_schema.py --diff", "taplo validate .agent.toml"]

[tasks.lint]
description = "Run ruff to check the Python files"
run = "ruff check"

[tasks.pyright]
description = "Run pyright to check types in the Python files"
run = "uv run pyright --project ."

# Misc

[tasks.ty]
description = "Run ty to check types in the Python files (doesn't fully work yet)"
run = "ty check"

# https://github.com/sst/opencode/pull/533
[tasks.build-opencode]
description = "Build a specific commit of Opencode CLI and install it to ~/.agent/bin/opencode"
tools.bun = "1.2.18"
tools.go = "1.24.4"
run = "uv run scripts/build_opencode.py"
