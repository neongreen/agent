# Rules

- Do not use `pip` or `poetry` (this project uses `uv`).

- Do not edit `config.schema.json` (it is generated from Pydantic models).
  If you changed the schema in `config.py`, run `mise generate-schema` to regenerate it.

- After making changes, run `mise pyright`. If it passes, also run `mise check:ai`.

## Logging rules

- Use `env.log_debug` for any debug messages that are not user-facing.

- Use the `@log_call` decorator when it makes sense to log the function call.
  You must list the arguments you want to log explicitly:

  ```python
  @log_call(include_args=["arg1", "arg2"])
  ```

  Don't include big object arguments like `env`.

## Markdown rules

- When writing Markdown files, put each sentence on a new line, and don't make sentences longer than 120 characters.

## Useful info

- You can run `mise ok --help` to see all CLI options.
  Every config option has a corresponding CLI option.

- The `ai/` folder contains your learnings and notes.
  You are encouraged to add to it, and update the existing files there as you go.

## Fixing errors

- `must be called from async context` actually means **trio** context.
  `trio.run()` is the entry point for async code and might be missing.

- Do not use `@pytest.mark.asyncio` decorator, it will fail with
  "An asyncio.Future, a coroutine, or an awaitable is required".

- "The mock LLM doesn't know how to respond to this prompt" means that
  you need to add a case for the prompt in the `llm_run_side_effect` function.
